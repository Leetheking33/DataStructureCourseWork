Lab 03: Pointers

int x=7, arr[5]={0, 10, 20, 30, 40};
For questions 1-14, the answers are each exactly ONE line of C++ code.  Also, you may assume an previous line of code you wrote are active.

1) Declare a pointer p1 that is initially pointing at x. 
int *p1 = &x;

2) Change the value of x to 33 without using x. 
*p1 = 33;

3) Declare a pointer named p2 pointing at the first item in arr. 
int *p2 = arr;

4) Change the first item in arr to 5 without using arr. 
*p2 = 5;

5) Change the 3rd value (the 20) in arr to 15 using [ ] and without using arr. 
p2[2] = 15;

6) Change the 4th value (the 30) in arr to 35 without using [ ] and without using arr. 
*(p2 + 3) = 35;

7) Change p2 to point to the third item in arr without using arr. 
p2 = (p2 + 2);

8) Change the item pointed at by p2 to 77 without using arr. 
*p2 = 77;

9) Write a Boolean expression that returns true iff p1 and p2 are pointing to an equivalent value. 
if (*p1 == *p2)
                cout << "true" << endl;
 
10) Write a Boolean expression that returns true iff p1 and p2 are pointing to the exact same location. 
if (p1 == p2)
        cout << "true" << endl;
 
11) Make p1 point to a dynamically allocated integer (make sure to create that integer!) 
//first two lines create integer
int *c = new int;
        *c = 5;

// this line of code answers the question
        p1 = c;

12) Free the memory at p1. 
delete p1;

13) Make p1 point to a dynamically allocated array of x integers (again, create that array!) 
int *ar = new int[x];
        for (int i=0; i < x; i++){
                ar[i] = 0;
        }

p1 = ar;

14) Free the memory at p1.


15) (4 points) Describe what is wrong with the following code segment, assuming it is all part of main(). Indicate if something is a compile time or runtime error or just bad programming. Also indicate how you would fix it. Line numbers have been added in ( ) for ease of reference.  There are several things with the code and for full credit you must find all of them.

(1) int *p;
(2) *p=5;
(3) p=new int();
(4) *p=7;
(5) p=new int();
(6) *p=9;
(7) delete p;
(8) *p=15;

Problems: 
1 creates a int pointer on the stack that points to random memory location this is bad programming and not safe. I instead would have codeded it like so:
int *p = NULL; 
This way it points to null instead of random memory.

Lines 3 and 4 create ints on the heap and line 7 only deletes one of the of them so by the end of the code there is still memory on the heap which results in memory loss. This is bad coding. It is also bad practice to have the same pointer point to two ints created on the heap before freeing memory. I would have fixed this by introducing a new pointer to hold the new int on line 5. I would also delete the new pointer I made and p before moving to line 8.














16) (2 points) Describe the difference between statically (stack) and dynamically(heap) allocated memory. Why does C++ support both types?








Due: January 28, 2018 2359
